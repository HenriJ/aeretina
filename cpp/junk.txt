
DoubleMat gaussian_gen(unsigned int size, double sigmA) {
    DoubleMat mat(2*size + 1);

    unsigned int cells = mat.side * mat.side;

    int shift = (int) size;
    int x = -shift;
    int y = -shift;

    sigmA = -sigmA;

    for (unsigned int i = 0; i < cells; ++i) {
        mat.dat[i] = exp(double( x*x + y*y ) / sigmA);

        ++x;
        if (x > shift) {
            x = -shift;
            ++y;
        }
    }

    mat.normalize();
    return mat;
}

DoubleMat gaussiandiff_gen(unsigned int size, double sigmA, double sigmB, double ratio) {
    DoubleMat mat(2*size + 1);

    unsigned int cells = mat.side * mat.side;

    int shift = (int) size;
    int x = -shift;
    int y = -shift;

    sigmA = -(sigmA*sigmA);
    sigmB = -(sigmB*sigmB);

    for (unsigned int i = 0; i < cells; ++i) {
        mat.dat[i] = exp(double( x*x + y*y ) / sigmA) - ratio * exp(double( x*x + y*y ) / sigmB);

        ++x;
        if (x > shift) {
            x = -shift;
            ++y;
        }
    }

    mat.normalize();
    return mat;
}


// def diff_gauss_kern(size = 2, sigmA = 0.9, sigmB = 1., ratio = 1.):
// 	""" Returns a normalized 2D kernel of a gaussian difference """
// 	x, y = sp.mgrid[-size:size+1, -size:size+1]
// 	sigmA = double(sigmA**2)
// 	sigmB = double(sigmB**2)
// 	g = sp.exp( -(x**2 + y**2) / sigmA ) - ratio * sp.exp( -(x**2 + y**2) / sigmB )
// 	return g / abs(g.sum())

void bp_feed(vector<bpEvent> bp, camEvent e, bpParams* params) {
// 	STwidth = ST.shape[0]
// 	shift = int(np.floor(STwidth / 2))
// 	for x in range(STwidth):
// 		for y in range(STwidth):
// 			bipolarX = e.x - shift + x
// 			bipolarY = e.y - shift + y
// 			// Check the boundaries
// 			if (bipolarX >= 0 and bipolarX < width and bipolarY >= 0 and bipolarY < width):
// 				cell = BP[e.x - shift + x][e.y - shift + y]
// 				// TODO: convert the list to a heap to avoid extensive search of outdated datas
// 				for d in cell:
// 					if (e.t - d[1] >= maxT):
// 						cell.remove(d)
// 				cell.append( (ST[x, y]*e.p, e.t) )
}












#include <GL/glew.h>
#ifdef __APPLE__
#  include <GLUT/glut.h>
#else
#  include <GL/glut.h>
#endif

static void render(void)
{
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glutSwapBuffers();
}

#include <boost/thread.hpp>
#include <boost/interprocess/ipc/message_queue.hpp>


    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutInitWindowSize(300, 300);
    glutCreateWindow("BP");
    glutDisplayFunc(&render);
    //glutIdleFunc(&update_fade_factor);

    glewInit();
    if (!GLEW_VERSION_2_0) {
        fprintf(stderr, "OpenGL 2.0 not available\n");
        return 1;
    }

    //boost::thread glutThread( glutMainLoop );


// TODO: threads
//    boost::interprocess::message_queue::remove("modifs");
//    boost::interprocess::message_queue queue(boost::interprocess::create_only, "modifs", 100, sizeof(Modif2d));
//    boost::thread_group tg;
//    modifMerger(bpONe);
//    tg.create_thread();



            // TODO: threads
            //queue.send(&set.modifs[i], sizeof(set.modifs[i]), 0);



